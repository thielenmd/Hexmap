%!PS-Adobe-3.0 EPSF-3.0
%%Creator: (ImageMagick)
%%Title: (DDb.eps)
%%CreationDate: (2018-07-28T23:59:34+00:00)
%%BoundingBox: -0 -0 45 45
%%HiResBoundingBox: 0 0 45 45
%%DocumentData: Clean7Bit
%%LanguageLevel: 1
%%Pages: 1
%%EndComments

%%BeginDefaults
%%EndDefaults

%%BeginProlog
%
% Display a color image.  The image is displayed in color on
% Postscript viewers or printers that support color, otherwise
% it is displayed as grayscale.
%
/DirectClassPacket
{
  %
  % Get a DirectClass packet.
  %
  % Parameters:
  %   red.
  %   green.
  %   blue.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/DirectClassImage
{
  %
  % Display a DirectClass image.
  %
  systemdict /colorimage known
  {
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { DirectClassPacket } false 3 colorimage
  }
  {
    %
    % No colorimage operator;  convert to grayscale.
    %
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { GrayDirectClassPacket } image
  } ifelse
} bind def

/GrayDirectClassPacket
{
  %
  % Get a DirectClass packet;  convert to grayscale.
  %
  % Parameters:
  %   red
  %   green
  %   blue
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/GrayPseudoClassPacket
{
  %
  % Get a PseudoClass packet;  convert to grayscale.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassPacket
{
  %
  % Get a PseudoClass packet.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassImage
{
  %
  % Display a PseudoClass image.
  %
  % Parameters:
  %   class: 0-PseudoClass or 1-Grayscale.
  %
  currentfile buffer readline pop
  token pop /class exch def pop
  class 0 gt
  {
    currentfile buffer readline pop
    token pop /depth exch def pop
    /grays columns 8 add depth sub depth mul 8 idiv string def
    columns rows depth
    [
      columns 0 0
      rows neg 0 rows
    ]
    { currentfile grays readhexstring pop } image
  }
  {
    %
    % Parameters:
    %   colors: number of colors in the colormap.
    %   colormap: red, green, blue color packets.
    %
    currentfile buffer readline pop
    token pop /colors exch def pop
    /colors colors 3 mul def
    /colormap colors string def
    currentfile colormap readhexstring pop pop
    systemdict /colorimage known
    {
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { PseudoClassPacket } false 3 colorimage
    }
    {
      %
      % No colorimage operator;  convert to grayscale.
      %
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { GrayPseudoClassPacket } image
    } ifelse
  } ifelse
} bind def

/DisplayImage
{
  %
  % Display a DirectClass or PseudoClass image.
  %
  % Parameters:
  %   x & y translation.
  %   x & y scale.
  %   label pointsize.
  %   image label.
  %   image columns & rows.
  %   class: 0-DirectClass or 1-PseudoClass.
  %   compression: 0-none or 1-RunlengthEncoded.
  %   hex color packets.
  %
  gsave
  /buffer 512 string def
  /byte 1 string def
  /color_packet 3 string def
  /pixels 768 string def

  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  x y translate
  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  currentfile buffer readline pop
  token pop /pointsize exch def pop
  x y scale
  currentfile buffer readline pop
  token pop /columns exch def
  token pop /rows exch def pop
  currentfile buffer readline pop
  token pop /class exch def pop
  currentfile buffer readline pop
  token pop /compression exch def pop
  class 0 gt { PseudoClassImage } { DirectClassImage } ifelse
  grestore
} bind def
%%EndProlog
%%Page:  1 1
%%PageBoundingBox: 0 0 45 45
userdict begin
DisplayImage
0 0
45 45
12
45 45
1
0
0
16
FFFFFF
EFEFE7
BDC6DE
BDC6AD
ADADFF
948CAD
848CE7
7B7B73
6B63EF
636363
5A5AC6
4A428C
313152
312921
000818
000000
0808080808080808080808080808080808080808080808080808080808080808080808080808
0808080808080808080808080808080808080808080808080808080808080808080808080808
0808080808080808080808080808080808080808080808080808080808080808080808080808
0808080808080808080808080808080808080808080808080B0B0B0C0B080808080B0B0B0B0C
080808080808080808080808080808080808080808080808080808080808080E0F0F0F0F0E0A
08080E0F0F0E0E0E0A0808080808080808080808080808080808080808080808080808080808
0E0F08080E0F0E08080E0F08080E0F0F08080808080808080808080808080808080808080808
080808080808080F0F0808080E0F0B080E0E08080A0E0F0A0808080808080808080808080808
08080808080808080808080808080D0F0808080D0F0B080E0E0808080E0F0A08080808080808
0808080808080808080808080808080808080808080E0F0808080E0F0B080E0E08080A0F0F0A
080808080808080808080808080808080808080808080808080808080E0E08080C0F0E08080E
0E08080C0F0E08080808080808080808080808080808080808080808080808080808080F0F0F
0F0F0E0A08080E0E0F0F0E0E0A08080808080808080808080808080808080808080808080808
080808080B0B0B0B0C080808080A0C0B0B0C0808080808080808080808080808080808080808
0808080808080808080808080808080808080808080808080808080808080808080808080806
0604080808080808080808080808080808080202020202020202030302030202080808080808
080808080604000B090406080808080808080808080808080803000000000000000000000000
030808080808080808080804090D09090C0A0408080808080808080808080808020000000000
0000000000000002080808080808080808000C0C000000030F03040608080808080808080808
0802000000000000000000000000030808080808080808060A0C0000000000090C0108080808
080808080808080802000000000000000000000000020808080808080808040D030000000000
030F0A0408080808080808080808080200000000000000000000000003080808080808080802
0E000000050300030C0900080808080808080808080803000000000000000000000000020808
08080808080A050700000703050300070F020808080808080808080808020000000000000000
00000000030808080808080804070100000209090000070C0900080808080808080808080300
0000000000000000000000020808080808080604030200000001010000070C07040808080808
080808080802000000000000000000000000030808080808080804070100000000000005070C
0704080808080808080808080300000000000000000000000002080808080808080603070000
0000000007090E01060808080808080808080803000000000000000000000000020808080808
080808060E030100000207030F03020808080808080808080808020000000000000000000000
0002080808080808080808030C0907090C090D09020808080808080808080808080303030303
0403030203020202060808080808080808080602070F0C0D0C03040808080808080808080808
080808080808080808080808080808080808080808080808080808000D030707000808080808
08080808080808080808080808080808080808080808080808080808080808080802020F070D
0700060808080808080808080808080808080808080808080808080808080808080808080808
06010C0D070707090F0304060808080808080808080808080808080808080808080808080808
08080808080808020C030100000000030C0C0108080808080808080808080808080808080808
0808080808080808080808080804070100000305050000030E07040808080808080808080808
0808080808080808080808080808080808080804030C000005070203070200070E0304080808
0808080808080808080808080808080808080808080808080808000C0900000901090C050300
070C090408080808080808080808080808080808080808080808080808080808080409070000
09010D09050500070D0700080808080808080808080808080808080808080808080808080808
0808000909000007090001070300070C09040808080808080808080808080808080808080808
08080808080808080806030C000000070909030107070F020608080808080808080808080808
080808080808080808080808080808080800090000000000000007050C0C0108080808080808
08080808080808080808080808080808080808080808080806030C070302030307090C0D0304
08080808080808080808080808080808080808080808080808080808080808080801090E0D0D
0D0D0F0300080808080808080808080808080808080808080808080808080808080808080808
0806080201070507030106080808080808080808080808080808080808080808080808080808
0808080808080808080808060402040408080808080808080808080808080808080808080808
0808080808080808080808080808080808080808080808080808080808080808080808080808
0808080808080808080808080808080808080808080808080808080808080808080808080808
0808080808080808080808080808080808080808080808080808080808080808080808080808
0808080808080808080808

end
%%PageTrailer
%%Trailer
%%EOF
