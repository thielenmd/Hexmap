%!PS-Adobe-3.0 EPSF-3.0
%%Creator: (ImageMagick)
%%Title: (ESb.eps)
%%CreationDate: (2018-07-28T23:59:34+00:00)
%%BoundingBox: -0 -0 45 45
%%HiResBoundingBox: 0 0 45 45
%%DocumentData: Clean7Bit
%%LanguageLevel: 1
%%Pages: 1
%%EndComments

%%BeginDefaults
%%EndDefaults

%%BeginProlog
%
% Display a color image.  The image is displayed in color on
% Postscript viewers or printers that support color, otherwise
% it is displayed as grayscale.
%
/DirectClassPacket
{
  %
  % Get a DirectClass packet.
  %
  % Parameters:
  %   red.
  %   green.
  %   blue.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/DirectClassImage
{
  %
  % Display a DirectClass image.
  %
  systemdict /colorimage known
  {
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { DirectClassPacket } false 3 colorimage
  }
  {
    %
    % No colorimage operator;  convert to grayscale.
    %
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { GrayDirectClassPacket } image
  } ifelse
} bind def

/GrayDirectClassPacket
{
  %
  % Get a DirectClass packet;  convert to grayscale.
  %
  % Parameters:
  %   red
  %   green
  %   blue
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/GrayPseudoClassPacket
{
  %
  % Get a PseudoClass packet;  convert to grayscale.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassPacket
{
  %
  % Get a PseudoClass packet.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassImage
{
  %
  % Display a PseudoClass image.
  %
  % Parameters:
  %   class: 0-PseudoClass or 1-Grayscale.
  %
  currentfile buffer readline pop
  token pop /class exch def pop
  class 0 gt
  {
    currentfile buffer readline pop
    token pop /depth exch def pop
    /grays columns 8 add depth sub depth mul 8 idiv string def
    columns rows depth
    [
      columns 0 0
      rows neg 0 rows
    ]
    { currentfile grays readhexstring pop } image
  }
  {
    %
    % Parameters:
    %   colors: number of colors in the colormap.
    %   colormap: red, green, blue color packets.
    %
    currentfile buffer readline pop
    token pop /colors exch def pop
    /colors colors 3 mul def
    /colormap colors string def
    currentfile colormap readhexstring pop pop
    systemdict /colorimage known
    {
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { PseudoClassPacket } false 3 colorimage
    }
    {
      %
      % No colorimage operator;  convert to grayscale.
      %
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { GrayPseudoClassPacket } image
    } ifelse
  } ifelse
} bind def

/DisplayImage
{
  %
  % Display a DirectClass or PseudoClass image.
  %
  % Parameters:
  %   x & y translation.
  %   x & y scale.
  %   label pointsize.
  %   image label.
  %   image columns & rows.
  %   class: 0-DirectClass or 1-PseudoClass.
  %   compression: 0-none or 1-RunlengthEncoded.
  %   hex color packets.
  %
  gsave
  /buffer 512 string def
  /byte 1 string def
  /color_packet 3 string def
  /pixels 768 string def

  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  x y translate
  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  currentfile buffer readline pop
  token pop /pointsize exch def pop
  x y scale
  currentfile buffer readline pop
  token pop /columns exch def
  token pop /rows exch def pop
  currentfile buffer readline pop
  token pop /class exch def pop
  currentfile buffer readline pop
  token pop /compression exch def pop
  class 0 gt { PseudoClassImage } { DirectClassImage } ifelse
  grestore
} bind def
%%EndProlog
%%Page:  1 1
%%PageBoundingBox: 0 0 45 45
userdict begin
DisplayImage
0 0
45 45
12
45 45
1
0
0
16
FFFFFF
DEDED6
B5B5B5
ADADFF
A5ADCE
8C9CE7
848C7B
7B6BF7
6B6BEF
635AD6
525263
524AA5
312963
293129
000021
000000
0707070707070707070707070707070707070707070707070707070707070707070707070707
0707070707070707070707070707070707070707070707070707070707070707070707070707
0707070707070707070707070707070707070707070707070707070707070707070707070707
0707070707070707070707070707070707070707070707070707070707070707070707070707
070707070707070707070707070707070707070707070707070707070707070E0F0E0F0F0F07
07070E0F0F070808080707070707070707070707070707070707070707070707070707070707
0F0F0F0F0E0F07070F0F0F0F0F0C080707070707070707070707070707070707070707070707
070707070707070F0F0707070707070F0E0C0707070707070707070707070707070707070707
07070707070707070707080707070F0F0F0F0F070707070E0F0F0E0707070707070707070707
0707070707070707070707070707070707070707070F0F0707070707070707070C0F0F070707
070707070707070707070707070707070707070707070707070707070E0F0707070707070F0C
07070F0F070707070707070707070707070707070707070707070707070707070707070F0F0F
0F0E0E07070F0F0E0F0F0F070707070707070707070707070707070707070707070707070707
070707070E0E0E0E0F0E0707070E0E0F0C070707070707070707070707070707070707070707
0707070707070707070707080707070707070707070707080707070707070707070707070707
0707070707070707070707070707070707070202020202020202020202020202070707070707
0707070707070707070707070707070707070707070707070702000000000000000000000000
0207070707070707070707070707070707070707070707070707070707070707020000000000
0000000000000002070707070708070707070707070707070707070707070707070707070707
0702000000000000000000000000020707070707070707070707070707070707070707070707
0707070707070707020000000000000000000000000207070707070707070707070707070707
0707070707070707070707070707070200000000000000000000000002080707070707070707
0707070707070707070707070707070707070707070702000000000000000000000000020707
0707070707070707070707070707070707070707070707070707070707020000000000000000
0000000002070707070707070707070707070707070707070707070707070707070707070200
0000000000000000000000020807070707070707070707070707070707070707070707070707
0707070707020000000000000000000000000207070707070707070707070707070707080707
0707070707070707070707070200000000000000000000000002070707070707070707070707
0707010207080707070707070707070707070702000000000000000000000000020707070707
0707070707070708010A0D040707070707070707070707070707020000000000000000000000
0002070707070707070707070707010A00000E02070807070707070707070707070202020202
020202020202020202070707070707070707070707040A00060A0D0107080707070707070707
070707070707070707070707070707070707070707070707070707070A060000060F01070707
07070707070707070707070707070707070707070707070707070707070707070707010D0000
00020E0607080707070707070707070707070707070707070707070707070707070707070707
070707020D000100010A0A010807070707070707070707070707070707070707070707070707
070707070707070707010A06000D0000060F0107070707070707070707070707070707070707
07070707070707070707070707070707010D0100010101060D06070707070707070707070707
0707070707070707070707070707070707070707070707010F0200020206060D060107070707
070707070707070707070707070707070707070707070707070707070707010A000006000006
0D02070707070707070707070707070707070707070707070707070707070707070707070801
060A000601060A0D000807070707070707070707070707070707070707070707070707070707
07070707070707010D000000060D0A0708070707070707070707070707070707070707070707
0707070707070707070707070708010D000000060D0207070707070707070707070707070707
07070707070707070707070707070707070707070707020F06060A0A01080707070707070707
0707070707070707070707070707070707070707070707070707070708010A0A0A0D02070707
0707070707070707070707070707070707070707070707070707070707070707070707070807
0101010707070707070707070707070707070707070707070707070707070707070707070707
0707070707070707070707070707070707070707070707070707070707070707070707070707
0707070707070707070707070707070707070707070707070707070707070707070707070707
0707070707070707070707070707070707070707070707070707070707070707070707070707
0707070707070707070707070707070707070707070707070707070707070707070707070707
0707070707070707070707070707070707070707070707070707070707070707070707070707
0707070707070707070707

end
%%PageTrailer
%%Trailer
%%EOF
